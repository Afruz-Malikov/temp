import logging
from datetime import datetime, timedelta, timezone
import httpx
import os
import json
from db import SessionLocal
from models.sended_message import SendedMessage
# import pyperclip
from pathlib import Path
from dotenv import load_dotenv
from pytz import timezone as pytz_timezone

# moscow_tz = pytz_timezone("Europe/Moscow")


load_dotenv()
logger = logging.getLogger("uvicorn.webhook")

GREENAPI_ID = os.getenv("GREENAPI_ID")
GREENAPI_TOKEN = os.getenv("GREENAPI_TOKEN")
CHATWOOT_API_KEY = os.getenv("CHATWOOT_API_KEY")
CHATWOOT_ACCOUNT_ID = os.getenv("CHATWOOT_ACCOUNT_ID")
CHATWOOT_INBOX_ID = os.getenv("CHATWOOT_INBOX_ID")
CHATWOOT_BASE_URL = os.getenv("CHATWOOT_BASE_URL")
GOOGLE_API_DOCS_SECRET = os.getenv("GOOGLE_API_DOCS_SECRET")
APPOINTMENTS_API_KEY = os.getenv("APPOINTMENTS_API_KEY") or 'CNvy6w6CRR1QLY2V6eq6gDQT'

LAST_PROCESSED_FILE = Path("last_processed.json")

def get_last_processed_time():
    tz_msk = timezone(timedelta(hours=3))
    now = datetime.now(tz=tz_msk)
    print('hop', now - timedelta(hours=1), now)
    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–∏–Ω—É—Å 1 —á–∞—Å –≤ UTC+3
    return now - timedelta(hours=1)

def save_last_processed_time():
    try:
        with open(LAST_PROCESSED_FILE, 'w') as f:
            json.dump({
                'last_processed': datetime.now(timezone.utc).isoformat()
            }, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

def get_all_chatwoot_contacts(client, base_url, account_id, api_key):
    contacts = []
    page = 1
    while True:
        resp = client.get(
            f"{base_url}/api/v1/accounts/{account_id}/contacts",
            params={"page": page},
            headers={"api_access_token": api_key, "Content-Type": "application/json"},
            timeout=10
        )
        resp.raise_for_status()
        data = resp.json()
        payload = data.get("payload", [])
        if not payload:
            break
        contacts.extend(payload)
        if len(payload) < 15:
            break
        page += 1
    return contacts

def send_chatwoot_message(phone, message):
    try:
        with httpx.Client() as client:
            contacts = get_all_chatwoot_contacts(client, CHATWOOT_BASE_URL, CHATWOOT_ACCOUNT_ID, CHATWOOT_API_KEY)
            contact = next((c for c in contacts if c["phone_number"] == f'+{phone}'), None)
            if not contact:
                contact_resp = client.post(
                    f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts",
                    json={"name": f"+{phone}", "phone_number": f"+{phone}"},
                    headers={"api_access_token": CHATWOOT_API_KEY,"Content-Type": "application/json"}, timeout=10
                )
                contact_resp.raise_for_status()
                contact_json = contact_resp.json()
                contact_id = (
                    contact_json.get("id")
                    or contact_json.get("payload", {}).get("contact", {}).get("id")
                    or contact_json.get("contact", {}).get("id")
                )
                if not contact_id:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å contact_id –∏–∑ –æ—Ç–≤–µ—Ç–∞: {contact_resp.text}")
                    return
            else:
                contact_id = contact["id"]
            convs_resp = client.get(
                f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts/{contact_id}/conversations",
                headers={"api_access_token": CHATWOOT_API_KEY,   "Content-Type": "application/json"}, timeout=10
            )
            convs_resp.raise_for_status()
            conversations = convs_resp.json().get("payload", [])
            if conversations:
                conversation_id = conversations[0]["id"]
                # –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ 3 –Ω–∞ conversation
                answ = client.patch(
                    f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/conversations/{conversation_id}",
                    json={"assignee_id": 3},
                    headers={"api_access_token": CHATWOOT_API_KEY, "Content-Type": "application/json"}, timeout=10  
                )
                print("answ",answ)
            else:
                conv_resp = client.post(
                    f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/conversations",
                    json={
                        "inbox_id": int(CHATWOOT_INBOX_ID),
                        "contact_id": contact_id,
                        "source_id": f"{phone.replace('+', '')}@c.us",
                        "additional_attributes": {},
                        "status": "open"
                    },
                    headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                )
                conv_resp.raise_for_status()
                conversation_id = conv_resp.json().get("id")
            msg_resp = client.post(
                f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/conversations/{conversation_id}/messages",
                json={"content": message, "message_type": "outgoing"},
                headers={"api_access_token": CHATWOOT_API_KEY,  "Content-Type": "application/json"}, timeout=10
            )
            msg_resp.raise_for_status()
            logger.info(f"Chatwoot –æ—Ç–≤–µ—Ç: {msg_resp.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Chatwoot: {e}")

city_data = {
    "0f2f2d09-8e7a-4356-bd4d-0b055d802e7b": {
        "address": "–≥ –û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ, —É–ª –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ, —Å—Ç—Ä. 41/1",
        "site": "https://orz.mrtexpert.ru/",
        "phone": "84961111111"
    },
    "5f290be7-14ff-4ccd-8bc8-2871a9ca9d5f": {
        "address": "–≥ –ú—ã—Ç–∏—â–∏, —É–ª –ö–æ–ª–ø–∞–∫–æ–≤–∞, –¥. 2–ê, –ø–æ–º–µ—â. 54",
        "site": "https://myt.mrtexpert.ru/",
        "phone": "84972222222"
    }
}
def process_items_cron():
    db = SessionLocal()
    try:
        last_processed = get_last_processed_time()
        now = datetime.now(timezone.utc)
        logger.info(f"üïê –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å {last_processed.strftime('%Y-%m-%d %H:%M:%S')} –¥–æ {now.strftime('%Y-%m-%d %H:%M:%S')}")
        # moscow_time = now.astimezone(moscow_tz)
        clinics_url = "https://apitest.mrtexpert.ru/api/v3/clinics"
        auth_header = {"Authorization": f"Bearer {APPOINTMENTS_API_KEY}"}
        city_ids = ["0f2f2d09-8e7a-4356-bd4d-0b055d802e7b", "5f290be7-14ff-4ccd-8bc8-2871a9ca9d5f"]

        clinics = []
        for city_id in city_ids:
            try:
                resp = httpx.get(f"{clinics_url}?city_id={city_id}", timeout=20, headers=auth_header)
                resp.raise_for_status()
                clinics.extend(resp.json().get("result", []))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–Ω–∏–∫ {city_id}: {e}")

        clinic_map = {c['id']: c for c in clinics}
        all_appointments = []

        for clinic in clinics:
            cid = clinic.get("id")
            if not cid:
                continue
            try:
                app_resp = httpx.get(
                    f"https://apitest.mrtexpert.ru/api/v3/appointments?clinic_id={cid}",
                    timeout=20,
                    headers=auth_header
                )
                app_resp.raise_for_status()
                appointments = app_resp.json().get("result", [])
                all_appointments.extend(appointments)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –∫–ª–∏–Ω–∏–∫–∏ {cid}: {e}")

        now = datetime.now(timezone.utc)
        today = now.date()
        processed_count = 0
        notified_phones = set()

        for obj in all_appointments:
            patient = obj.get("patient", {})
            phone = patient.get("phone") or "998180817" 
            if not phone or phone in notified_phones:
                continue

            items = obj.get("items", [])    
            for item in items:
                item_id = item.get("id")
                scheduled_at_str = item.get("scheduled_at")
                if not scheduled_at_str:
                    continue
                try:
                    scheduled_at = datetime.fromisoformat(scheduled_at_str)
                    if scheduled_at.tzinfo is None:
                        scheduled_at = scheduled_at.replace(tzinfo=timezone.utc)
                except Exception as e:
                    logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {scheduled_at_str}, –æ—à–∏–±–∫–∞: {e}")
                    continue

                if scheduled_at < now:
                    continue
                delta = scheduled_at - now
                dt_str = scheduled_at.strftime('%d.%m.%Y –≤ %H:%M')
                time_str = scheduled_at.strftime('%H:%M')
                clinic = obj.get('clinic', {})
                full_clinic = clinic_map.get(clinic.get("id"), clinic)
                address = full_clinic.get("address", "‚Äî")
                directions = full_clinic.get("directions", "")
                phone_center = city_data.get(full_clinic.get("city_id", ""), {}).get("phone", full_clinic.get("phone", "‚Äî"))
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î
                sent_new = db.query(SendedMessage).filter_by(appointment_id=item_id, type="new_remind").first()
                if not sent_new:
                    if 0 <= scheduled_at.hour < 7:
                        logger.info(f"üåô –ù–æ—á—å: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ new_remind –¥–ª—è {item_id}")
                        continue
                    # 1. –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    new_msg = (
                        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
                        f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ú–†–¢ –≠–∫—Å–ø–µ—Ä—Ç –Ω–∞ {dt_str}.\n"
                        f"–ê–¥—Ä–µ—Å: {address}, {directions}\n"
                        f"–í —Ü–µ–Ω—Ç—Ä–µ –Ω—É–∂–Ω–æ –±—ã—Ç—å –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –ø—Ä–∏–µ–º–∞.\n"
                        f"–ü—Ä–∏ —Å–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –ø–∞—Å–ø–æ—Ä—Ç, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: {phone_center}"
                    )
                    send_chatwoot_message(phone, new_msg)
                    try:
                        service_resp = httpx.get(
                            f"https://apitest.mrtexpert.ru/api/v3/services/{item.get('service', {}).get('id', '')}?clinic_id={clinic.get('id')}",
                            timeout=20,
                            headers=auth_header
                        )
                        service_resp.raise_for_status()
                        prepare_message = service_resp.json().get("result", {}).get("prepare", "")
                        if prepare_message:
                            send_chatwoot_message(phone, prepare_message)
                            logger.info(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π: {item_id}")
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {e}")
                    db.add(SendedMessage(appointment_id=item_id, type="new_remind"))
                    db.commit()
                    logger.info(f"üü¢ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {item_id}")
                    notified_phones.add(phone)
                    processed_count += 1
                    continue

                # 2. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
                minutes_to_appointment = int(delta.total_seconds() / 60)
                if 1400 <= minutes_to_appointment <= 1440:
                    if 0 <= scheduled_at.hour < 7:
                        logger.info(f"üåô –ù–æ—á—å: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ new_remind –¥–ª—è {item_id}")
                        continue
                    confirm_msg = (
                        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
                        f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ú–†–¢ –≠–∫—Å–ø–µ—Ä—Ç –Ω–∞ {dt_str}.\n"
                        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–∏–∑–∏—Ç –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞):\n"
                        f"1 ‚Äì –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é\n2 ‚Äì –ø—Ä–æ—à—É –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏\n3 ‚Äì –ø—Ä–æ—à—É –æ—Ç–º–µ–Ω–∏—Ç—å\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ {phone_center}"
                    )
                    sent_day = db.query(SendedMessage).filter_by(appointment_id=item_id, type="day_remind").first()
                    if not sent_day:
                        send_chatwoot_message(phone, confirm_msg)
                        db.add(SendedMessage(appointment_id=item_id, type="day_remind"))
                        db.commit()
                        logger.info(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {item_id}")
                        notified_phones.add(phone)
                        processed_count += 1
                        continue

                # 3. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞
                if timedelta(hours=1, minutes=50) <= delta <= timedelta(hours=2):
                    remind_msg = (
                        
                        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
                        f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤–∞—à –ø—Ä–∏–µ–º –≤ –ú–†–¢ –≠–∫—Å–ø–µ—Ä—Ç —Å–µ–≥–æ–¥–Ω—è –≤ {time_str}.\n"
                        f"—Ü–µ–Ω—Ç—Ä–µ –Ω—É–∂–Ω–æ –±—ã—Ç—å –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ {phone_center}."
                    )
                    sent_remind = db.query(SendedMessage).filter_by(appointment_id=item_id, type="hour_remind").first()
                    if not sent_remind:
                        send_chatwoot_message(phone, remind_msg)
                        db.add(SendedMessage(appointment_id=item_id, type="hour_remind"))
                        db.commit()
                        logger.info(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {item_id}")
                        notified_phones.add(phone)
                        processed_count += 1

        save_last_processed_time()
        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {processed_count}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_items_cron: {e}")
        save_last_processed_time()
    finally:
        db.close()