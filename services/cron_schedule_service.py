import logging
from datetime import datetime, timedelta, timezone
import httpx
import os
import time
import copy
import json
from pathlib import Path

logger = logging.getLogger("uvicorn.webhook")

GREENAPI_ID = os.getenv("GREENAPI_ID")
GREENAPI_TOKEN = os.getenv("GREENAPI_TOKEN")
CHATWOOT_API_KEY = os.getenv("CHATWOOT_API_KEY")
CHATWOOT_ACCOUNT_ID = os.getenv("CHATWOOT_ACCOUNT_ID")
CHATWOOT_INBOX_ID = os.getenv("CHATWOOT_INBOX_ID")
CHATWOOT_BASE_URL = os.getenv("CHATWOOT_BASE_URL")
GOOGLE_API_DOCS_SECRET = os.getenv("GOOGLE_API_DOCS_SECRET")
APPOINTMENTS_API_KEY = os.getenv("APPOINTMENTS_API_KEY")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
LAST_PROCESSED_FILE = Path("last_processed.json")

def get_last_processed_time():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        if LAST_PROCESSED_FILE.exists():
            with open(LAST_PROCESSED_FILE, 'r') as f:
                data = json.load(f)
                return datetime.fromisoformat(data['last_processed'])
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    return datetime.now(timezone.utc) - timedelta(hours=1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–∞—Å –Ω–∞–∑–∞–¥

def save_last_processed_time():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        with open(LAST_PROCESSED_FILE, 'w') as f:
            json.dump({
                'last_processed': datetime.now(timezone.utc).isoformat()
            }, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

def send_greenapi_message(chat_id, message):
    url = f"https://api.green-api.com/waInstance{GREENAPI_ID}/SendMessage/{GREENAPI_TOKEN}"
    payload = {"chatId": chat_id, "message": message}
    try:
        with httpx.Client() as client:
            resp = client.post(url, json=payload, timeout=10)
            logger.info(f"GreenAPI –æ—Ç–≤–µ—Ç: {resp.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GreenAPI: {e}")

def send_chatwoot_message(phone, message, type="outgoing"):
    try:
        with httpx.Client() as client:
            contacts_resp = client.get(
                f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts",
                headers={"api_access_token": CHATWOOT_API_KEY, "Content-Type": "application/json"}, timeout=10
            )
            contacts_resp.raise_for_status()
            contacts = contacts_resp.json().get("payload", [])
            print(contacts)
            contact = next((c for c in contacts if c["phone_number"] == f'+{phone}'), None)
            if not contact:
                # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
                contact_resp = client.post(
                    f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts",
                    json={"name": f"+{phone}", "phone_number": f"+{phone}"},
                    headers={"api_access_token": CHATWOOT_API_KEY,"Content-Type": "application/json"}, timeout=10
                )
                contact_resp.raise_for_status()
                contact_id = contact_resp.json().get("id")
            else:
                contact_id = contact["id"]
            convs_resp = client.get(
                f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts/{contact_id}/conversations",
                headers={"api_access_token": CHATWOOT_API_KEY,   "Content-Type": "application/json"}, timeout=10
            )
            convs_resp.raise_for_status()
            conversations = convs_resp.json().get("payload", [])
            if conversations:
                conversation_id = conversations[0]["id"]
            else:
                conv_resp = client.post(
                    f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/conversations",
                    json={
                        "inbox_id": int(CHATWOOT_INBOX_ID),
                        "contact_id": contact_id,
                        "source_id": f"{phone.replace('+', '')}@c.us",
                        "additional_attributes": {},
                        "status": "open"
                    },
                    headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                )
                conv_resp.raise_for_status()
                conversation_id = conv_resp.json().get("id")
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg_resp = client.post(
                f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/conversations/{conversation_id}/messages",
                json={"content": message, "message_type": "outgoing"},
                headers={"api_access_token": CHATWOOT_API_KEY,  "Content-Type": "application/json"}, timeout=10
            )
            msg_resp.raise_for_status()
            logger.info(f"Chatwoot –æ—Ç–≤–µ—Ç: {msg_resp.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Chatwoot: {e}")

city_data = {
    "0f2f2d09-8e7a-4356-bd4d-0b055d802e7b": {
        "site": "https://orz.mrtexpert.ru/",
        "phone": "84961111111"
    },
    "5f290be7-14ff-4ccd-8bc8-2871a9ca9d5f": {
        "site": "https://myt.mrtexpert.ru/",
        "phone": "84972222222"
    }
}

PENDING_NOTIFICATIONS_FILE = Path("pending_notifications.json")

def load_pending_notifications():
    if PENDING_NOTIFICATIONS_FILE.exists():
        try:
            with open(PENDING_NOTIFICATIONS_FILE, 'r') as f:
                return json.load(f)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ pending_notifications: {e}")
    return {}
            
def save_pending_notifications(data):
    try:
        with open(PENDING_NOTIFICATIONS_FILE, 'w') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ pending_notifications: {e}")

def get_last_user_message(phone):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ Chatwoot)
    try:
        with httpx.Client() as client:
            contacts_resp = client.get(
                f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts",
                headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
            )
            contacts_resp.raise_for_status()
            contacts = contacts_resp.json().get("payload", [])
            contact = next((c for c in contacts if c["phone_number"] == f'+{phone}'), None)
            if contact:
                contact_id = contact["id"]
                convs_resp = client.get(
                    f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts/{contact_id}/conversations",
                    headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                )
                convs_resp.raise_for_status()
                conversations = convs_resp.json().get("payload", [])
                for conv in conversations:
                    conversation_id = conv["id"]
                    msgs_resp = client.get(
                        f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/conversations/{conversation_id}/messages",
                        headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                    )
                    msgs_resp.raise_for_status()
                    messages = msgs_resp.json().get("payload", [])
                    # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    for msg in reversed(messages):
                        if msg.get("message_type") == "incoming":
                            return msg.get("content"), msg.get("created_at")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    return None, None

def process_items_cron():
    try:
        last_processed = get_last_processed_time()
        now = datetime.now(timezone.utc)
        logger.info(f"üïê –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å {last_processed.strftime('%Y-%m-%d %H:%M:%S')} –¥–æ {now.strftime('%Y-%m-%d %H:%M:%S')}")

        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫
        
        clinics_url = "https://apitest.mrtexpert.ru/api/v3/clinics"
        auth_header = {
    "Authorization": f"Bearer {APPOINTMENTS_API_KEY}",
        }
        city_ids = [
            "0f2f2d09-8e7a-4356-bd4d-0b055d802e7b",
            "5f290be7-14ff-4ccd-8bc8-2871a9ca9d5f"
        ]
        clinics = []
        for city_id in city_ids:
            clinics_url = f"https://apitest.mrtexpert.ru/api/v3/clinics?city_id={city_id}"
            try:
                clinics_resp = httpx.get(clinics_url, timeout=20, headers=auth_header)
                clinics_resp.raise_for_status()
                clinics.extend(clinics_resp.json().get("result", []))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–Ω–∏–∫ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_id}: {e}")

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–Ω–∏–∫–µ –ø–æ –µ–µ ID
        clinic_map = {c['id']: c for c in clinics}

        # 2. –î–ª—è –∫–∞–∂–¥–æ–π –∫–ª–∏–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ (appointments)
        all_appointments = []
        for clinic in clinics:
            cid = clinic.get("id")
            if not cid:
                continue
            try:
                app_url = f"https://apitest.mrtexpert.ru/api/v3/appointments?clinic_id={cid}"
                app_resp = httpx.get(app_url, timeout=20, headers=auth_header)
                app_resp.raise_for_status()
                appointments = app_resp.json().get("result", [])
                all_appointments.extend(appointments)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–ª–∏–Ω–∏–∫–∏ {cid}: {e}")
        processed_count = 0
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–µ–ª–µ—Ñ–æ–Ω—É) –∏ –¥–∞—Ç–µ
        user_appointments = {}
        for obj in all_appointments:
            patient = obj.get('patient', {})
            phone = patient.get('phone') or "998998180817"
            items = obj.get('items', [])
            for item in items:
                scheduled_at_str = item.get('scheduled_at')
                if not scheduled_at_str:
                    continue
                try:
                    scheduled_at = datetime.fromisoformat(scheduled_at_str)
                    if scheduled_at.tzinfo is None:
                        scheduled_at = scheduled_at.replace(tzinfo=timezone.utc)
                except Exception as e:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {scheduled_at_str}, –æ—à–∏–±–∫–∞: {e}")
                    continue
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –∑–∞–ø–∏—Å—å
                if scheduled_at_str.startswith("2025-07-16T13:10:00"):
                    logger.info(f"[DEBUG] –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å scheduled_at=2025-07-16T13:10:00+03:00: obj={json.dumps(obj, ensure_ascii=False)}, item={json.dumps(item, ensure_ascii=False)}")
                # –ö–ª—é—á: (phone, –¥–∞—Ç–∞)
                date_key = scheduled_at.date().isoformat()
                created_at_str = obj.get('created_at')
                created_at = None
                if created_at_str:
                    try:
                        created_at = datetime.fromisoformat(created_at_str)
                        if created_at.tzinfo is None:
                            created_at = created_at.replace(tzinfo=timezone.utc)
                    except Exception as e:
                        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ created_at: {created_at_str}, –æ—à–∏–±–∫–∞: {e}")

                user_appointments.setdefault(phone, {}).setdefault(date_key, []).append({
                    'obj': obj,
                    'item': item,
                    'scheduled_at': scheduled_at,
                    'created_at': created_at,
                })
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        pending_notifications = load_pending_notifications()
        for phone, dates in user_appointments.items():
            for date_key, appts in dates.items():
                appts.sort(key=lambda x: x['scheduled_at'])
                queue = appts
                state = pending_notifications.get(phone, {}).get(date_key, {})
                idx = state.get('last_sent_idx', 0)
                last_sent_time = state.get('last_sent_time')
                last_sent_type = state.get('last_sent_type')
                last_sent_content = state.get('last_sent_content')
                last_answer_time = state.get('last_answer_time')
                answered = False
                if last_sent_time:
                    last_user_msg, last_user_msg_time = get_last_user_message(phone)
                    if last_user_msg_time and last_user_msg_time > last_sent_time:
                        answered = True
                        state['last_answer_time'] = last_user_msg_time
                if answered or not last_sent_time:
                    if idx < len(queue):
                        # –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –∑–∞–ø—É—Å–∫ –∫—Ä–æ–Ω–∞
                        entry = queue[idx]
                        obj = entry['obj']
                        item = entry['item']
                        scheduled_at = entry['scheduled_at']
                        created_at = entry['created_at']
                        delta = scheduled_at - now
                        clinic = obj.get('clinic', {})
                        full_clinic = clinic_map.get(clinic.get('id'), clinic)
                        city_id = full_clinic.get('city_id')
                        address = full_clinic.get('address', '‚Äî')
                        city_url = city_data.get(city_id, {}).get('site', full_clinic.get('city_url', 'https://mrtexpert.ru'))
                        directions = full_clinic.get('directions', '')
                        prep_url = full_clinic.get('prep_url', city_url)
                        phone_center = city_data.get(city_id, {}).get('phone', full_clinic.get('phone', '‚Äî'))
                        dt_str = scheduled_at.strftime('%d.%m.%Y –≤ %H:%M')
                        time_str = scheduled_at.strftime('%H:%M')
                        # 1. –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å
                        if created_at and created_at > last_processed:
                            new_record_message = (
                                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
                                f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ú–†–¢ –≠–∫—Å–ø–µ—Ä—Ç –Ω–∞ {dt_str}.\n"
                                f"–ê–¥—Ä–µ—Å: {address}, {directions}\n"
                                f"–°—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞ {city_url}\n"
                                f"–í —Ü–µ–Ω—Ç—Ä–µ –Ω—É–∂–Ω–æ –±—ã—Ç—å –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –ø—Ä–∏–µ–º–∞.\n"
                                f"*–î–ª—è –≤–∞—à–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞. –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–µ–π –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ {prep_url}\n"
                                f"–ü—Ä–∏ —Å–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –ø–∞—Å–ø–æ—Ä—Ç, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π\n"
                                f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: {phone_center}"
                            )
                            send_chatwoot_message(phone, new_record_message)
                            logger.info(f"[QUEUE] {phone} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {dt_str} (–Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å)")
                            pending_notifications.setdefault(phone, {})[date_key] = {
                                'last_sent_idx': idx + 1,
                                'last_sent_time': datetime.now(timezone.utc).isoformat(),
                                'last_sent_type': 'new_record',
                                'last_sent_content': new_record_message,
                                'last_answer_time': state.get('last_answer_time'),
                            }
                            processed_count += 1
                            break  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –∑–∞–ø—É—Å–∫
                        # 2. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
                        elif timedelta(hours=25) >= delta >= timedelta(hours=23):
                            confirm_message = (
                                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
                                f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ú–†–¢ –≠–∫—Å–ø–µ—Ä—Ç –Ω–∞ {dt_str}.\n"
                                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–∏–∑–∏—Ç –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞):\n"
                                f"1 ‚Äì –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é\n2- –ø—Ä–æ—à—É –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏  \n3 ‚Äì –ø—Ä–æ—à—É –æ—Ç–º–µ–Ω–∏—Ç—å\n"
                                f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ {phone_center}"
                            )
                            send_chatwoot_message(phone, confirm_message)
                            logger.info(f"[QUEUE] {phone} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {dt_str} (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å)")
                            pending_notifications.setdefault(phone, {})[date_key] = {
                                'last_sent_idx': idx + 1,
                                'last_sent_time': datetime.now(timezone.utc).isoformat(),
                                'last_sent_type': 'confirm',
                                'last_sent_content': confirm_message,
                                'last_answer_time': state.get('last_answer_time'),
                            }
                            processed_count += 1
                            break  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –∑–∞–ø—É—Å–∫
                        # 3. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞
                        elif timedelta(hours=2) >= delta > timedelta(0):
                            reminder_message = (
                                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
                                f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤–∞—à –ø—Ä–∏–µ–º –≤ –ú–†–¢ –≠–∫—Å–ø–µ—Ä—Ç —Å–µ–≥–æ–¥–Ω—è –≤ {time_str}.\n"
                                f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ {phone_center}."
                            )
                            send_chatwoot_message(phone, reminder_message)
                            logger.info(f"[QUEUE] {phone} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {dt_str} (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞)")
                            pending_notifications.setdefault(phone, {})[date_key] = {
                                'last_sent_idx': idx + 1,
                                'last_sent_time': datetime.now(timezone.utc).isoformat(),
                                'last_sent_type': 'reminder',
                                'last_sent_content': reminder_message,
                                'last_answer_time': state.get('last_answer_time'),
                            }
                            processed_count += 1
                            break  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –∑–∞–ø—É—Å–∫
                    else:
                        logger.info(f"[QUEUE] {phone} –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {scheduled_at}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        save_pending_notifications(pending_notifications)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        save_last_processed_time()
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {processed_count}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
        save_last_processed_time()
