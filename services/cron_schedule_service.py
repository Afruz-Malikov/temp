import logging
from datetime import datetime, timedelta, timezone
import httpx
import os
import time
import copy
import json
from pathlib import Path

logger = logging.getLogger("uvicorn.webhook")

GREENAPI_ID = os.getenv("GREENAPI_ID")
GREENAPI_TOKEN = os.getenv("GREENAPI_TOKEN")
CHATWOOT_API_KEY = os.getenv("CHATWOOT_API_KEY")
CHATWOOT_ACCOUNT_ID = os.getenv("CHATWOOT_ACCOUNT_ID")
CHATWOOT_INBOX_ID = os.getenv("CHATWOOT_INBOX_ID")
CHATWOOT_BASE_URL = os.getenv("CHATWOOT_BASE_URL")
GOOGLE_API_DOCS_SECRET = os.getenv("GOOGLE_API_DOCS_SECRET")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
LAST_PROCESSED_FILE = Path("last_processed.json")

def get_last_processed_time():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        if LAST_PROCESSED_FILE.exists():
            with open(LAST_PROCESSED_FILE, 'r') as f:
                data = json.load(f)
                return datetime.fromisoformat(data['last_processed'])
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    return datetime.now(timezone.utc) - timedelta(hours=1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–∞—Å –Ω–∞–∑–∞–¥

def save_last_processed_time():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        with open(LAST_PROCESSED_FILE, 'w') as f:
            json.dump({
                'last_processed': datetime.now(timezone.utc).isoformat()
            }, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

def send_greenapi_message(chat_id, message):
    url = f"https://api.green-api.com/waInstance{GREENAPI_ID}/SendMessage/{GREENAPI_TOKEN}"
    payload = {"chatId": chat_id, "message": message}
    try:
        with httpx.Client() as client:
            resp = client.post(url, json=payload, timeout=10)
            logger.info(f"GreenAPI –æ—Ç–≤–µ—Ç: {resp.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GreenAPI: {e}")

def send_chatwoot_message(phone, message, type="outgoing"):
    try:
        with httpx.Client() as client:
            contacts_resp = client.get(
                f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts",
                headers={"api_access_token": CHATWOOT_API_KEY, "Content-Type": "application/json"}, timeout=10
            )
            contacts_resp.raise_for_status()
            contacts = contacts_resp.json().get("payload", [])
            print(contacts)
            contact = next((c for c in contacts if c["phone_number"] == f'+{phone}'), None)
            if not contact:
                # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
                contact_resp = client.post(
                    f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts",
                    json={"name": f"+{phone}", "phone_number": f"+{phone}"},
                    headers={"api_access_token": CHATWOOT_API_KEY,"Content-Type": "application/json"}, timeout=10
                )
                contact_resp.raise_for_status()
                contact_id = contact_resp.json().get("id")
            else:
                contact_id = contact["id"]
            convs_resp = client.get(
                f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts/{contact_id}/conversations",
                headers={"api_access_token": CHATWOOT_API_KEY,   "Content-Type": "application/json"}, timeout=10
            )
            convs_resp.raise_for_status()
            conversations = convs_resp.json().get("payload", [])
            if conversations:
                conversation_id = conversations[0]["id"]
            else:
                conv_resp = client.post(
                    f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/conversations",
                    json={
                        "inbox_id": int(CHATWOOT_INBOX_ID),
                        "contact_id": contact_id,
                        "source_id": f"{phone.replace('+', '')}@c.us",
                        "additional_attributes": {},
                        "status": "open"
                    },
                    headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                )
                conv_resp.raise_for_status()
                conversation_id = conv_resp.json().get("id")
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg_resp = client.post(
                f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/conversations/{conversation_id}/messages",
                json={"content": message, "message_type": "outgoing"},
                headers={"api_access_token": CHATWOOT_API_KEY,  "Content-Type": "application/json"}, timeout=10
            )
            msg_resp.raise_for_status()
            logger.info(f"Chatwoot –æ—Ç–≤–µ—Ç: {msg_resp.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Chatwoot: {e}")

def process_items_cron():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        last_processed = get_last_processed_time()
        now = datetime.now(timezone.utc)
        
        logger.info(f"üïê –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å {last_processed.strftime('%Y-%m-%d %H:%M:%S')} –¥–æ {now.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = {
            "success": True,
            "result": [
                {
                    "id": "d2b2cf91-8eb3-11ef-b7d4-0050560c1b69",
                    "clinic": {
                        "id": "376bcf13-05d7-11e5-bc43-002590e38b62",
                        "name": "–ú–æ—Å–∫–≤–∞1 –ú–†–¢-–≠–∫—Å–ø–µ—Ä—Ç"
                    },
                    "patient": {
                        "id": "365dd5c8-8ebe-11ef-b35f-0050560c262e",
                        "firstname": "–ò–ª—å—è",
                        "lastname": "–ê–Ω–∏—Å–∏–º–æ–≤",
                        "middlename": "–ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞",
                        "birthdate": "1989-12-20",
                        "sex": "F",
                        "phone": "79255890919",
                        "email": "template@bk.ru",
                        "snils": "",
                        "email_confirm": True
                    },
                    "items": [
                        {
                            "id": "808657a2-8ef0-4f8e-b3a3-25270192e116",
                            "ris_id": [
                                "4cc0661b-147d-4842-b4a3-96eb518a2b21"
                            ],
                            "service": {
                                "id": "31d7dfc5-ac1f-11e9-b820-00505693b6f1",
                                "names": {
                                    "name_mz": "–ú–∞–≥–Ω–∏—Ç–Ω–æ-—Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–∞—è —Ç–æ–º–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞ (–æ–¥–∏–Ω –æ—Ç–¥–µ–ª)/—à–µ–π–Ω—ã–π –æ—Ç–¥–µ–ª",
                                    "name_display": "–ú–∞–≥–Ω–∏—Ç–Ω–æ-—Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–∞—è —Ç–æ–º–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞ (–æ–¥–∏–Ω –æ—Ç–¥–µ–ª)/—à–µ–π–Ω—ã–π –æ—Ç–¥–µ–ª"
                                },
                                "duration": 30,
                                "price": {
                                    "amount": 5750,
                                    "currency": "rub"
                                }
                            },
                            "scheduled_at": (datetime.now(timezone.utc) + timedelta(hours=2)).isoformat(),
                            "status": "confirmed",
                            "doctor": {
                                "id": "9b3bfc64-cb60-11ee-b7ce-0050560c10ce",
                                "firstname": "–ù–∏–∫–∏—Ç–∞",
                                "lastname": "–°—Ç—É–∫–æ–ª–æ–≤",
                            },
                            "profession": {
                                "id": "6cae07d0-67ba-11eb-b822-005056b387b3",
                                "bank": False,
                                "position": "–í—Ä–∞—á-—Ä–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥",
                                "position_id": "c1c325e4-86ca-11e9-b81f-00505693b6f1",
                                "specialization": "–ú–†–¢.",
                                "specialization_id": "a14f4089-b932-11ed-bc3b-00155d000204"
                            },
                            "provider": {
                                "id": "83ad5a3e-bc83-11ec-b822-005056b3ebff",
                                "name": "–°–±–µ—Ä–ó–¥–æ—Ä–æ–≤—å–µ"
                            },
                            "refdoctor": None,
                            "partners_finances": False
                        }
                    ],
                   
                    "created_at": datetime.now(timezone.utc).isoformat(),
                    "updated_at": "2025-07-05T10:17:58+03:00"
                }
            ],
            "errors": [],
            "info": {
                "count": 3776,
                "page": 1,
                "more": True,
                "limit": 1
            }
        }
        
        # –î–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        # –í—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å
        second_obj = copy.deepcopy(data['result'][0])
        second_item = copy.deepcopy(second_obj['items'][0])
        second_item['scheduled_at'] = (now + timedelta(hours=23, minutes=30)).isoformat()
        second_obj['items'] = [second_item]
        second_obj['created_at'] = (now - timedelta(hours=25)).isoformat()
        data['result'].append(second_obj)
        
        # –¢—Ä–µ—Ç—å—è –∑–∞–ø–∏—Å—å - –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
        third_obj = copy.deepcopy(data['result'][0])
        third_item = copy.deepcopy(third_obj['items'][0])
        third_item['scheduled_at'] = (now + timedelta(hours=48)).isoformat()
        third_obj['items'] = [third_item]
        third_obj['created_at'] = now.isoformat()
        data['result'].append(third_obj)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        # –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å ‚Äî –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 —á–∞—Å–∞ (–¥–æ –ø—Ä–∏–µ–º–∞ < 2 —á–∞—Å–∞)
        if data['result']:
            first_obj = data['result'][0]
            if first_obj.get('items'):
                first_obj['items'][0]['scheduled_at'] = (now + timedelta(hours=1, minutes=59)).isoformat()
                first_obj['created_at'] = (now - timedelta(hours=25)).isoformat()  # —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                logger.info(f"–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 —á–∞—Å–∞: {first_obj['items'][0]['scheduled_at']}")
        
        # –í—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—å ‚Äî –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å (–¥–æ –ø—Ä–∏–µ–º–∞ ~24 —á–∞—Å–∞)
        if len(data['result']) > 1:
            second_obj = data['result'][1]
            if second_obj.get('items'):
                second_obj['items'][0]['scheduled_at'] = (now + timedelta(hours=23, minutes=30)).isoformat()
                second_obj['created_at'] = (now - timedelta(hours=25)).isoformat()  # —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å
                logger.info(f"–í—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å: {second_obj['items'][0]['scheduled_at']}")
        
        # –¢—Ä–µ—Ç—å—è –∑–∞–ø–∏—Å—å ‚Äî –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π)
        if len(data['result']) > 2:
            third_obj = data['result'][2]
            if third_obj.get('items'):
                third_obj['items'][0]['scheduled_at'] = (now + timedelta(hours=48)).isoformat()
                third_obj['created_at'] = now.isoformat()  # –ù–û–í–ê–Ø –∑–∞–ø–∏—Å—å
                logger.info(f"–¢—Ä–µ—Ç—å—è –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ –ù–û–í–ê–Ø: {third_obj['items'][0]['scheduled_at']}")
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ ‚Äî —Ç–æ–ª—å–∫–æ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–ø—É—Å–∫—É (–¥–æ –ø—Ä–∏–µ–º–∞ > 2 —á–∞—Å–∞)
        for i, obj in enumerate(data['result'][3:], start=3):
            for item in obj.get('items', []):
                item['scheduled_at'] = (now + timedelta(hours=72 + i)).isoformat()
            obj['created_at'] = (now - timedelta(hours=1)).isoformat()
            logger.info(f"–ó–∞–ø–∏—Å—å {i+1} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –±—É–¥—É—â–µ–µ: {obj['items'][0]['scheduled_at']}")
        
        objects = data.get('result', [])
        processed_count = 0
        for obj in objects:
            patient = obj.get('patient', {})
            phone = patient.get('phone')
            items = obj.get('items', [])
            created_at_str = obj.get('created_at')
            created_at = None
            if created_at_str:
                try:
                    created_at = datetime.fromisoformat(created_at_str)
                    if created_at.tzinfo is None:
                        created_at = created_at.replace(tzinfo=timezone.utc)
                except Exception as e:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ created_at: {created_at_str}, –æ—à–∏–±–∫–∞: {e}")
            
            for item in items:
                scheduled_at_str = item.get('scheduled_at')
                if not scheduled_at_str:
                    continue
                try:
                    scheduled_at = datetime.fromisoformat(scheduled_at_str)
                    if scheduled_at.tzinfo is None:
                        scheduled_at = scheduled_at.replace(tzinfo=timezone.utc)
                except Exception as e:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {scheduled_at_str}, –æ—à–∏–±–∫–∞: {e}")
                    continue
                
                delta = scheduled_at - now
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ (—Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
                if created_at and created_at > last_processed:
                    notified_new = False
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    patient_name = f"{patient.get('lastname', '')} {patient.get('firstname', '')}".strip()
                    doctor_name = f"{item.get('doctor', {}).get('lastname', '')} {item.get('doctor', {}).get('firstname', '')}".strip()
                    service_name = item.get('service', {}).get('names', {}).get('name_display', '–ú–†–¢')
                    scheduled_time = scheduled_at.strftime("%d.%m.%Y –≤ %H:%M")
                    
                    new_record_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {patient_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∑–∞–ø–∏—Å—å –∫ {doctor_name} –Ω–∞ {service_name} –≤ {scheduled_time}"
                    
                    try:
                        with httpx.Client() as client:
                            contacts_resp = client.get(
                                f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts",
                                headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                            )
                            contacts_resp.raise_for_status()
                            contacts = contacts_resp.json().get("payload", [])
                            contact = next((c for c in contacts if c["phone_number"] == f'+{phone}'), None)
                            if contact:
                                contact_id = contact["id"]
                                convs_resp = client.get(
                                    f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts/{contact_id}/conversations",
                                    headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                                )
                                convs_resp.raise_for_status()
                                conversations = convs_resp.json().get("payload", [])
                                for conv in conversations:
                                    conversation_id = conv["id"]
                                    msgs_resp = client.get(
                                        f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/conversations/{conversation_id}/messages",
                                        headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                                    )
                                    msgs_resp.raise_for_status()
                                    messages = msgs_resp.json().get("payload", [])
                                    for msg in messages:
                                        if msg.get("content") == new_record_message:
                                            notified_new = True
                                            break
                                    if notified_new:
                                        break
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: {e}")
                    if not notified_new:
                        send_chatwoot_message(phone, new_record_message)
                        logger.info(f"Item {item.get('id', '–Ω–µ—Ç id')} –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {scheduled_at_str}")
                        processed_count += 1
                    else:
                        logger.info(f"Item {item.get('id', '–Ω–µ—Ç id')} —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏")

                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –ø—Ä–∏–µ–º–∞ (24 —á–∞—Å–∞ ¬± 1 —á–∞—Å)
                if timedelta(hours=25) >= delta >= timedelta(hours=23):
                    notified_day = False
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
                    patient_name = f"{patient.get('lastname', '')} {patient.get('firstname', '')}".strip()
                    doctor_name = f"{item.get('doctor', {}).get('lastname', '')} {item.get('doctor', {}).get('firstname', '')}".strip()
                    service_name = item.get('service', {}).get('names', {}).get('name_display', '–ú–†–¢')
                    scheduled_time = scheduled_at.strftime("%d.%m.%Y –≤ %H:%M")
                    
                    day_reminder_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {patient_name}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–∞–º –æ –∑–∞–ø–∏—Å–∏ –∑–∞–≤—Ç—Ä–∞ —É {doctor_name} –Ω–∞ {service_name} –≤ {scheduled_time}"
                
                    try:
                        with httpx.Client() as client:
                            contacts_resp = client.get(
                                f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts",
                                headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                            )
                            contacts_resp.raise_for_status()
                            contacts = contacts_resp.json().get("payload", [])
                            contact = next((c for c in contacts if c["phone_number"] == f'+{phone}'), None)
                            if contact:
                                contact_id = contact["id"]
                                convs_resp = client.get(
                                    f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts/{contact_id}/conversations",
                                    headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                                )
                                convs_resp.raise_for_status()
                                conversations = convs_resp.json().get("payload", [])
                                for conv in conversations:
                                    conversation_id = conv["id"]
                                    msgs_resp = client.get(
                                        f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/conversations/{conversation_id}/messages",
                                        headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                                    )
                                    msgs_resp.raise_for_status()
                                    messages = msgs_resp.json().get("payload", [])
                                    for msg in messages:
                                        if msg.get("content") == day_reminder_message:
                                            notified_day = True
                                            break
                                    if notified_day:
                                        break
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∑–∞ –¥–µ–Ω—å: {e}")
                    if not notified_day:
                        send_chatwoot_message(phone, day_reminder_message)
                        logger.info(f"Item {item.get('id', '–Ω–µ—Ç id')} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: {scheduled_at_str}")
                        processed_count += 1
                    else:
                        logger.info(f"Item {item.get('id', '–Ω–µ—Ç id')} —É–∂–µ –ø–æ–ª—É—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: {scheduled_at_str}")

                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –ø—Ä–∏–µ–º–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)
                if timedelta(hours=2) >= delta > timedelta(0):
                    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
                    notified = False
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    patient_name = f"{patient.get('lastname', '')} {patient.get('firstname', '')}".strip()
                    doctor_name = f"{item.get('doctor', {}).get('lastname', '')} {item.get('doctor', {}).get('firstname', '')}".strip()
                    service_name = item.get('service', {}).get('names', {}).get('name_display', '–ú–†–¢')
                    scheduled_time = scheduled_at.strftime("%d.%m.%Y –≤ %H:%M")
                    
                    reminder_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {patient_name}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–∞–º –æ –∑–∞–ø–∏—Å–∏ —É {doctor_name} –Ω–∞ {service_name} —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –≤ {scheduled_time}"
                
                    try:
                        with httpx.Client() as client:
                            contacts_resp = client.get(
                                f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts",
                                headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                            )
                            contacts_resp.raise_for_status()
                            contacts = contacts_resp.json().get("payload", [])
                            contact = next((c for c in contacts if c["phone_number"] == f'+{phone}'), None)
                            if contact:
                                contact_id = contact["id"]
                                convs_resp = client.get(
                                    f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/contacts/{contact_id}/conversations",
                                    headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                                )
                                convs_resp.raise_for_status()
                                conversations = convs_resp.json().get("payload", [])
                                for conv in conversations:
                                    conversation_id = conv["id"]
                                    msgs_resp = client.get(
                                        f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}/conversations/{conversation_id}/messages",
                                        headers={"api_access_token": CHATWOOT_API_KEY}, timeout=10
                                    )
                                    msgs_resp.raise_for_status()
                                    messages = msgs_resp.json().get("payload", [])
                                    for msg in messages:
                                        if msg.get("content") == reminder_message:
                                            notified = True
                                            break
                                    if notified:
                                        break
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                    if not notified:
                        send_chatwoot_message(phone, reminder_message)
                        logger.info(f"Item {item.get('id', '–Ω–µ—Ç id')} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞: {scheduled_at_str}")
                        processed_count += 1
                    else:
                        logger.info(f"Item {item.get('id', '–Ω–µ—Ç id')} —É–∂–µ –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω, –ø–æ–≤—Ç–æ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: {scheduled_at_str}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        save_last_processed_time()
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {processed_count}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
        save_last_processed_time()
